{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Machine Learning For full documentation visit mkdocs.org . Commands mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit. Project layout mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Home"},{"location":"#welcome-to-machine-learning","text":"For full documentation visit mkdocs.org .","title":"Welcome to Machine Learning"},{"location":"#commands","text":"mkdocs new [dir-name] - Create a new project. mkdocs serve - Start the live-reloading docs server. mkdocs build - Build the documentation site. mkdocs -h - Print help message and exit.","title":"Commands"},{"location":"#project-layout","text":"mkdocs.yml # The configuration file. docs/ index.md # The documentation homepage. ... # Other markdown pages, images and other files.","title":"Project layout"},{"location":"1_pengantar/","text":"Pertemuan 1: Pengantar Machine Learning pada bidang Teknik Elektro [TKE1686] MK Machine Learning (3-SKS) oleh Gramandha Wega Intyanto 1. Definisi Machine Learning Machine Learning (ML) adalah cabang dari kecerdasan buatan (Artificial Intelligence, AI) yang memungkinkan sistem untuk belajar dari data tanpa diprogram secara eksplisit. ML menggunakan algoritma dan model statistik untuk mengenali pola dalam data dan membuat keputusan atau prediksi berdasarkan pola tersebut. Definisi dari beberapa ahli Arthur Samuel (1959) : \" Machine Learning adalah bidang studi terkait pemberian kemampuan pada komputer untuk belajar tanpa diprogram secara eksplisit.\" Tom Mitchell (1997) : \" Machine Learning adalah suatu program komputer yang belajar dari pengalaman (experience E) terhadap tugas (Task T) dengan ukuran performa (performance P) , jika performanya terhadap tugas (Task T) meningkat dengan pengalaman (experience E) .\" Dapat disimpulkan bahwa machine learning merupakan bidang ilmu yang mempelajari dari data dan mengeksekusi hasil dari pembelajaran data tersebut. 2. Sejarah Singkat Machine Learning 1950-an: Alan Turing memperkenalkan Turing Test untuk mengukur kecerdasan mesin. Frank Rosenblatt mengembangkan perceptron, model awal dari neural network. 1970-an s.d. 1980-an: Pengembangan algoritma decision tree dan neural network pertama. Backpropagation mulai digunakan dalam pelatihan neural network. 1990-an: Munculnya Support Vector Machine (SVM) dan Random Forest sebagai metode klasifikasi canggih. Mulai berkembangnya aplikasi ML dalam pattern recognition dan data mining. 2000-an s.d. Sekarang: Kemajuan dalam Deep Learning dan Neural Networks berkat peningkatan daya komputasi dan ketersediaan big data. Model seperti Convolutional Neural Network (CNN) dan Recurrent Neural Network (RNN) menjadi dasar dalam pengolahan citra dan sinyal. Aplikasi ML berkembang pesat di berbagai bidang, termasuk kesehatan, finansial, transportasi, dan teknik elektro. 3. Klasifikasi Machine Learning yang akan di pelajari Ditarik dari permasalahan pembelajaran (learning problem) dalam konteks ML pada dataset (sejumlah n sample data) untuk melakukan prediksi terhadap properties yang tidak diketahui pada dataset lain yang sejenis. Secara umum untuk penyelesain permasalahan pembelajaran, Machine Learning dibagi menjadi dua teknik dasar yang akan kita pelajari pada mata kuliah (2), yaitu supervised learning dan unsupervised learning Supervised Learning Teknik atau model pembelajaran yang diterapkan pada mesin dari pola dalam data yang memiliki label tertentu contoh kasus: 1. Deteksi kesalah paa jaringan listrik, dimana data yang dimiliki yaitu tegangan, arus, frekuensi dalam jaringan. Kemudian tiap data memiliki label jaringan berstatus: Normal dan Gangguan 2. Robot akan melakukan klasifikasi jenis bunga, dimana data yang memiliki kelopak bunga, bentuk kelopak, warna, dsb. Kemudian tiap data memiliki label jenis bunga: Mawar dan Bunga Matahari Pada supervised learning ini pada umumnya memiliki minimal 2 data, data input yaitu pola pada data dan data output yaitu kategori (label). source : geeksforgeeks Tipe dari Supervised Learning yaitu: Klasifikasi: Di mana output adalah variabel kategoris (mis., Email spam vs non-spam, ya vs tidak). Regresi: Di mana output adalah variabel kontinu (mis., Memprediksi harga rumah, harga saham). Contoh algoritma atau model yang sering digunakan pada bidang elektro yaitu Regresi, Suppert Vector Machine (SVM), K-Nearest Neighbors (K-NN), Random Forest biasanya digunakan untuk klasifikasi, dsb. Berikut contoh algoritma yang lebih lengkap terkait Supervised Learning Algoritma Regresi, Klasifikasi Tujuan Metode Kasus Penggunaan Regresi Linear Regresi Memprediksi nilai output kontinu Persamaan linear yang meminimalkan jumlah kuadrat residu Memprediksi nilai kontinu Regresi Logistik Klasifikasi Memprediksi variabel output biner Fungsi logistik yang mentransformasikan hubungan linear Tugas klasifikasi biner Pohon Keputusan Keduanya Memodelkan keputusan dan hasil Struktur pohon dengan keputusan dan hasil Tugas klasifikasi dan regresi Random Forest Keduanya Meningkatkan akurasi klasifikasi dan regresi Menggabungkan beberapa pohon keputusan Mengurangi overfitting, meningkatkan akurasi prediksi SVM Keduanya Membuat hyperplane untuk klasifikasi atau prediksi nilai kontinu Memaksimalkan margin antara kelas atau memprediksi nilai kontinu Tugas klasifikasi dan regresi KNN Keduanya Memprediksi kelas atau nilai berdasarkan k tetangga terdekat Mencari k tetangga terdekat dan memprediksi berdasarkan mayoritas atau rata-rata Tugas klasifikasi dan regresi, sensitif terhadap data berisik Gradient Boosting Keduanya Menggabungkan model lemah untuk membuat model yang kuat Mengoreksi kesalahan secara iteratif dengan model baru Tugas klasifikasi dan regresi untuk meningkatkan akurasi prediksi Naive Bayes Klasifikasi Memprediksi kelas berdasarkan asumsi independensi fitur Teorema Bayes dengan asumsi independensi fitur Klasifikasi teks, penyaringan spam, analisis sentimen, medis Unsupervised Learning Teknik atau model pembelajaran yang diterapkan pada mesin dari pola dalam data yang tidak memiliki label tertentu Contoh kasus Operator jaringan lisrik ingin mengkelompokkan pelanggan berdasarkan pola komsumsi energi untuk meningkatan efiseiensi ditribusi daya. Pada unsupervised learning ini pada umumnya memiliki minimal 1 data, data input yaitu pola pada data. source : geeksforgeeks Tipe dari Unsupervised Learning yaitu: Clustering Algorithms : Pengelompokan dalam pembelajaran mesin tanpa pengawasan adalah proses pengelompokan data yang tidak berlabel ke dalam kelompok berdasarkan kesamaan mereka. Tujuan pengelompokan adalah untuk mengidentifikasi pola dan hubungan dalam data tanpa pengetahuan sebelumnya tentang makna data. Association Rule Learning : Pembelajaran aturan asosiasi juga dikenal sebagai penambangan aturan asosiasi adalah teknik umum yang digunakan untuk menemukan asosiasi dalam pembelajaran mesin tanpa pengawasan. Dimensionality Reduction : Pengurangan dimensi adalah proses mengurangi jumlah fitur dalam dataset sambil menjaga informasi sebanyak mungkin. Teknik ini berguna untuk meningkatkan kinerja algoritma pembelajaran mesin dan untuk visualisasi data. Contoh algoritma atau model yang digunakan pada yaitu K-means cluster Contoh dataset ML Supervised Unsupervised 3. Peran Machine Learning dalam Teknik Elektro Machine Learning memiliki peran penting dalam berbagai aspek Teknik Elektro, termasuk pemrosesan sinyal, pengendalian sistem, dan optimasi kinerja perangkat elektronik. Beberapa penerapan utama ML dalam Teknik Elektro adalah: a. Pemrosesan Sinyal dan Citra Digital Deteksi dan klasifikasi sinyal menggunakan Fourier Transform dan Wavelet Transform. Pengenalan pola dalam sinyal kelistrikan, seperti fault detection dalam jaringan listrik. Penerapan ML dalam pengolahan citra digital untuk mendeteksi objek atau menganalisis data dari kamera industri. b. Sistem Kendali dan Otomasi Machine Learning digunakan dalam sistem kontrol adaptif, misalnya pada robotik dan otomasi industri. Peningkatan efisiensi sistem kendali berbasis fuzzy logic dan neural network. c. Prediksi dan Optimasi dalam Jaringan Listrik Memprediksi konsumsi daya listrik menggunakan time-series forecasting. Optimasi distribusi daya menggunakan ML untuk meningkatkan efisiensi grid listrik. d. Machine Learning dalam Embedded Systems Implementasi TinyML (Machine Learning pada perangkat dengan daya rendah seperti mikroprosesor dan FPGA). Aplikasi ML dalam Internet of Things (IoT) untuk sistem pemantauan cerdas. e. Keamanan dan Deteksi Anomali Pendeteksian anomali dalam jaringan listrik untuk mencegah blackout atau gangguan listrik. Sistem keamanan berbasis ML dalam deteksi peretasan jaringan komunikasi dan kendali. 4. Tools yang digunakan untuk ML Pada akhir tahun ini perancangan ML bahasa program yang sering digunakan yaitu Python dengan beberapa tools library berikut: Framework dan Library ML - TensorFlow : Framework open-source untuk deep learning dan ML yang dikembangkan oleh Google. - PyTorch : Framework ML berbasis Python dengan fleksibilitas tinggi, dikembangkan oleh Facebook AI. - Scikit-learn : Library ML berbasis Python untuk klasifikasi, regresi, dan clustering. - Keras : API tinggi berbasis TensorFlow untuk pengembangan model deep learning. Tools untuk Pemrosesan Data dan Visualisasi - Pandas : Library Python untuk manipulasi dan analisis data berbasis tabel. - NumPy : Library untuk operasi numerik dan array multidimensi dalam Python. - Matplotlib : Library visualisasi untuk membuat grafik dan plot data. - Seaborn : Library berbasis Matplotlib untuk visualisasi data yang lebih menarik. - Dask : Library untuk pemrosesan data besar yang dapat berjalan secara paralel. *Note: Kalau Anda ingin mencoba-coba ada software yang sudah include untuk penerapan ML yaitu WEKA 4. Tugas Mahasiswa Silahkan cari studi kasus pada bidang Anda yang dapat diselesaikan dengan ML. Beri 2 contoh tiap teknik( supervised learning dan unspervised learning ) satu masalah! Cari dataset terkait studi kasus tersebut kemudian jelaskan proses penyelesaian dengan algoritma apa! Note: Rekomendasi tempat untuk mencari dataset: kaggle , uci , google dataset","title":"Pertemuan 1: Pengantar Machine Learning pada bidang Teknik Elektro"},{"location":"1_pengantar/#pertemuan-1-pengantar-machine-learning-pada-bidang-teknik-elektro","text":"[TKE1686] MK Machine Learning (3-SKS) oleh Gramandha Wega Intyanto","title":"Pertemuan 1: Pengantar Machine Learning pada bidang Teknik Elektro"},{"location":"1_pengantar/#1-definisi-machine-learning","text":"Machine Learning (ML) adalah cabang dari kecerdasan buatan (Artificial Intelligence, AI) yang memungkinkan sistem untuk belajar dari data tanpa diprogram secara eksplisit. ML menggunakan algoritma dan model statistik untuk mengenali pola dalam data dan membuat keputusan atau prediksi berdasarkan pola tersebut.","title":"1. Definisi Machine Learning"},{"location":"1_pengantar/#definisi-dari-beberapa-ahli","text":"Arthur Samuel (1959) : \" Machine Learning adalah bidang studi terkait pemberian kemampuan pada komputer untuk belajar tanpa diprogram secara eksplisit.\" Tom Mitchell (1997) : \" Machine Learning adalah suatu program komputer yang belajar dari pengalaman (experience E) terhadap tugas (Task T) dengan ukuran performa (performance P) , jika performanya terhadap tugas (Task T) meningkat dengan pengalaman (experience E) .\" Dapat disimpulkan bahwa machine learning merupakan bidang ilmu yang mempelajari dari data dan mengeksekusi hasil dari pembelajaran data tersebut.","title":"Definisi dari beberapa ahli"},{"location":"1_pengantar/#2-sejarah-singkat-machine-learning","text":"","title":"2. Sejarah Singkat Machine Learning"},{"location":"1_pengantar/#1950-an","text":"Alan Turing memperkenalkan Turing Test untuk mengukur kecerdasan mesin. Frank Rosenblatt mengembangkan perceptron, model awal dari neural network.","title":"1950-an:"},{"location":"1_pengantar/#1970-an-sd-1980-an","text":"Pengembangan algoritma decision tree dan neural network pertama. Backpropagation mulai digunakan dalam pelatihan neural network.","title":"1970-an s.d. 1980-an:"},{"location":"1_pengantar/#1990-an","text":"Munculnya Support Vector Machine (SVM) dan Random Forest sebagai metode klasifikasi canggih. Mulai berkembangnya aplikasi ML dalam pattern recognition dan data mining.","title":"1990-an:"},{"location":"1_pengantar/#2000-an-sd-sekarang","text":"Kemajuan dalam Deep Learning dan Neural Networks berkat peningkatan daya komputasi dan ketersediaan big data. Model seperti Convolutional Neural Network (CNN) dan Recurrent Neural Network (RNN) menjadi dasar dalam pengolahan citra dan sinyal. Aplikasi ML berkembang pesat di berbagai bidang, termasuk kesehatan, finansial, transportasi, dan teknik elektro.","title":"2000-an s.d. Sekarang:"},{"location":"1_pengantar/#3-klasifikasi-machine-learning-yang-akan-di-pelajari","text":"Ditarik dari permasalahan pembelajaran (learning problem) dalam konteks ML pada dataset (sejumlah n sample data) untuk melakukan prediksi terhadap properties yang tidak diketahui pada dataset lain yang sejenis. Secara umum untuk penyelesain permasalahan pembelajaran, Machine Learning dibagi menjadi dua teknik dasar yang akan kita pelajari pada mata kuliah (2), yaitu supervised learning dan unsupervised learning","title":"3. Klasifikasi Machine Learning yang akan di pelajari"},{"location":"1_pengantar/#supervised-learning","text":"Teknik atau model pembelajaran yang diterapkan pada mesin dari pola dalam data yang memiliki label tertentu contoh kasus: 1. Deteksi kesalah paa jaringan listrik, dimana data yang dimiliki yaitu tegangan, arus, frekuensi dalam jaringan. Kemudian tiap data memiliki label jaringan berstatus: Normal dan Gangguan 2. Robot akan melakukan klasifikasi jenis bunga, dimana data yang memiliki kelopak bunga, bentuk kelopak, warna, dsb. Kemudian tiap data memiliki label jenis bunga: Mawar dan Bunga Matahari Pada supervised learning ini pada umumnya memiliki minimal 2 data, data input yaitu pola pada data dan data output yaitu kategori (label). source : geeksforgeeks Tipe dari Supervised Learning yaitu: Klasifikasi: Di mana output adalah variabel kategoris (mis., Email spam vs non-spam, ya vs tidak). Regresi: Di mana output adalah variabel kontinu (mis., Memprediksi harga rumah, harga saham). Contoh algoritma atau model yang sering digunakan pada bidang elektro yaitu Regresi, Suppert Vector Machine (SVM), K-Nearest Neighbors (K-NN), Random Forest biasanya digunakan untuk klasifikasi, dsb. Berikut contoh algoritma yang lebih lengkap terkait Supervised Learning Algoritma Regresi, Klasifikasi Tujuan Metode Kasus Penggunaan Regresi Linear Regresi Memprediksi nilai output kontinu Persamaan linear yang meminimalkan jumlah kuadrat residu Memprediksi nilai kontinu Regresi Logistik Klasifikasi Memprediksi variabel output biner Fungsi logistik yang mentransformasikan hubungan linear Tugas klasifikasi biner Pohon Keputusan Keduanya Memodelkan keputusan dan hasil Struktur pohon dengan keputusan dan hasil Tugas klasifikasi dan regresi Random Forest Keduanya Meningkatkan akurasi klasifikasi dan regresi Menggabungkan beberapa pohon keputusan Mengurangi overfitting, meningkatkan akurasi prediksi SVM Keduanya Membuat hyperplane untuk klasifikasi atau prediksi nilai kontinu Memaksimalkan margin antara kelas atau memprediksi nilai kontinu Tugas klasifikasi dan regresi KNN Keduanya Memprediksi kelas atau nilai berdasarkan k tetangga terdekat Mencari k tetangga terdekat dan memprediksi berdasarkan mayoritas atau rata-rata Tugas klasifikasi dan regresi, sensitif terhadap data berisik Gradient Boosting Keduanya Menggabungkan model lemah untuk membuat model yang kuat Mengoreksi kesalahan secara iteratif dengan model baru Tugas klasifikasi dan regresi untuk meningkatkan akurasi prediksi Naive Bayes Klasifikasi Memprediksi kelas berdasarkan asumsi independensi fitur Teorema Bayes dengan asumsi independensi fitur Klasifikasi teks, penyaringan spam, analisis sentimen, medis","title":"Supervised Learning"},{"location":"1_pengantar/#unsupervised-learning","text":"Teknik atau model pembelajaran yang diterapkan pada mesin dari pola dalam data yang tidak memiliki label tertentu Contoh kasus Operator jaringan lisrik ingin mengkelompokkan pelanggan berdasarkan pola komsumsi energi untuk meningkatan efiseiensi ditribusi daya. Pada unsupervised learning ini pada umumnya memiliki minimal 1 data, data input yaitu pola pada data. source : geeksforgeeks Tipe dari Unsupervised Learning yaitu: Clustering Algorithms : Pengelompokan dalam pembelajaran mesin tanpa pengawasan adalah proses pengelompokan data yang tidak berlabel ke dalam kelompok berdasarkan kesamaan mereka. Tujuan pengelompokan adalah untuk mengidentifikasi pola dan hubungan dalam data tanpa pengetahuan sebelumnya tentang makna data. Association Rule Learning : Pembelajaran aturan asosiasi juga dikenal sebagai penambangan aturan asosiasi adalah teknik umum yang digunakan untuk menemukan asosiasi dalam pembelajaran mesin tanpa pengawasan. Dimensionality Reduction : Pengurangan dimensi adalah proses mengurangi jumlah fitur dalam dataset sambil menjaga informasi sebanyak mungkin. Teknik ini berguna untuk meningkatkan kinerja algoritma pembelajaran mesin dan untuk visualisasi data. Contoh algoritma atau model yang digunakan pada yaitu K-means cluster","title":"Unsupervised Learning"},{"location":"1_pengantar/#contoh-dataset-ml","text":"Supervised Unsupervised","title":"Contoh dataset ML"},{"location":"1_pengantar/#3-peran-machine-learning-dalam-teknik-elektro","text":"Machine Learning memiliki peran penting dalam berbagai aspek Teknik Elektro, termasuk pemrosesan sinyal, pengendalian sistem, dan optimasi kinerja perangkat elektronik. Beberapa penerapan utama ML dalam Teknik Elektro adalah:","title":"3. Peran Machine Learning dalam Teknik Elektro"},{"location":"1_pengantar/#a-pemrosesan-sinyal-dan-citra-digital","text":"Deteksi dan klasifikasi sinyal menggunakan Fourier Transform dan Wavelet Transform. Pengenalan pola dalam sinyal kelistrikan, seperti fault detection dalam jaringan listrik. Penerapan ML dalam pengolahan citra digital untuk mendeteksi objek atau menganalisis data dari kamera industri.","title":"a. Pemrosesan Sinyal dan Citra Digital"},{"location":"1_pengantar/#b-sistem-kendali-dan-otomasi","text":"Machine Learning digunakan dalam sistem kontrol adaptif, misalnya pada robotik dan otomasi industri. Peningkatan efisiensi sistem kendali berbasis fuzzy logic dan neural network.","title":"b. Sistem Kendali dan Otomasi"},{"location":"1_pengantar/#c-prediksi-dan-optimasi-dalam-jaringan-listrik","text":"Memprediksi konsumsi daya listrik menggunakan time-series forecasting. Optimasi distribusi daya menggunakan ML untuk meningkatkan efisiensi grid listrik.","title":"c. Prediksi dan Optimasi dalam Jaringan Listrik"},{"location":"1_pengantar/#d-machine-learning-dalam-embedded-systems","text":"Implementasi TinyML (Machine Learning pada perangkat dengan daya rendah seperti mikroprosesor dan FPGA). Aplikasi ML dalam Internet of Things (IoT) untuk sistem pemantauan cerdas.","title":"d. Machine Learning dalam Embedded Systems"},{"location":"1_pengantar/#e-keamanan-dan-deteksi-anomali","text":"Pendeteksian anomali dalam jaringan listrik untuk mencegah blackout atau gangguan listrik. Sistem keamanan berbasis ML dalam deteksi peretasan jaringan komunikasi dan kendali.","title":"e. Keamanan dan Deteksi Anomali"},{"location":"1_pengantar/#4-tools-yang-digunakan-untuk-ml","text":"Pada akhir tahun ini perancangan ML bahasa program yang sering digunakan yaitu Python dengan beberapa tools library berikut: Framework dan Library ML - TensorFlow : Framework open-source untuk deep learning dan ML yang dikembangkan oleh Google. - PyTorch : Framework ML berbasis Python dengan fleksibilitas tinggi, dikembangkan oleh Facebook AI. - Scikit-learn : Library ML berbasis Python untuk klasifikasi, regresi, dan clustering. - Keras : API tinggi berbasis TensorFlow untuk pengembangan model deep learning. Tools untuk Pemrosesan Data dan Visualisasi - Pandas : Library Python untuk manipulasi dan analisis data berbasis tabel. - NumPy : Library untuk operasi numerik dan array multidimensi dalam Python. - Matplotlib : Library visualisasi untuk membuat grafik dan plot data. - Seaborn : Library berbasis Matplotlib untuk visualisasi data yang lebih menarik. - Dask : Library untuk pemrosesan data besar yang dapat berjalan secara paralel. *Note: Kalau Anda ingin mencoba-coba ada software yang sudah include untuk penerapan ML yaitu WEKA","title":"4. Tools yang digunakan untuk ML"},{"location":"1_pengantar/#4-tugas-mahasiswa","text":"Silahkan cari studi kasus pada bidang Anda yang dapat diselesaikan dengan ML. Beri 2 contoh tiap teknik( supervised learning dan unspervised learning ) satu masalah! Cari dataset terkait studi kasus tersebut kemudian jelaskan proses penyelesaian dengan algoritma apa! Note: Rekomendasi tempat untuk mencari dataset: kaggle , uci , google dataset","title":"4. Tugas Mahasiswa"},{"location":"2_dataset/","text":"Pertemuan 2: Pengumpulan, Pemrosesan dan Visualisasi pada Dataset [TKE1686] MK Machine Learning (3-SKS) oleh Gramandha Wega Intyanto 1. Alur Kerja pada Machine Learning graph LR; A[\"Tahap 1\\nPengumpulan Dataset\"] --> B[\"Tahap 2\\nPemrosesan Dataset\"]; B --> C[\"Tahap 3\\nPembelajaran Model\"]; C --> D[\"Tahap 4\\nEvaluasi Model\"]; D -.->|Perbaikan pemrosesan Dataset| B; D -.->|Revisi Model| C; D -.->|Perbaikan Dataset| A; Pengumpulan Dataset: Langkah awal ML adalah mengumpulkan kumpulan data. Hal-hal yang harus dipertimbangakan dalam pengumpulan data yaitu metode pengambilan data, data akan digunakan untuk apa? Preproses Data: Data yang kami kumpulkan sering kali tidak terorganisir dan tidak dapat langsung digunakan untuk melatih model. Sebelum melanjutkan ke langkah berikutnya, data perlu diproses terlebih dahulu. Kumpulan data mungkin berisi data yang hilang atau berisik, perlu di perbaiki atau di filter ; Data yang berbeda dapat berada dalam rentang yang berbeda, perlu dilakukan standarisasi atau normalisasi karena bisa jadi menjadi masalah bagi model; Perlu menemukan dan memilih data yang lebih berkontribusi untuk menemukan variabel target; Terakhir, kumpulan data harus dibagi menjadi dua set yaitu pelatihan dan pengujian (bisa juga dilakukan pembagian menjadi 3 yaitu pelatihan, validasi, pengujian ) | yang sering digunakan 80% set pelatihan, 20% set pengujian / 70% set pelatihan 20% set validasi 10% set pengujian. Melatih Model: Berdasarkan permasalahan, jenis model yang dibutuhkan harus dipilih terlebih dahulu. Saat memilih model, informasi yang tersedia pada kumpulan data harus dipertimbangkan. Evaluasi Model: Setelah model dibangun dan dilatih, penting untuk memahami seberapa baik model telah dilatih, seberapa baik kinerjanya, dan apakah model akan berguna untuk eksperimen. Kumpulan data set pengujiandigunakan untuk menguji model , dan berbagai metrik evaluasi digunakan untuk mengevaluasi dan memahami model. 2. Dataset Performa model sangat bergantung pada persiapan kumpulan data (dataset). Biasanya Kumpulan data paling baik disusun dalam bentuk tabel, di mana setiap baris sesuai dengan satu entri data dan setiap kolom mewakili variabel tertentu yang terkait dengan semua data yang tersedia dalam kumpulan data tersebut. Ukuran kumpulan data yang berkisar dari terabyte hingga megabyte dapat disebut sebagai kumpulan data besar, sedangkan kumpulan data dalam kisaran kilobyte adalah kumpulan data kecil. 2.1. Pengumpulan Data a. Data yang diambil langsung dari secara langsung dengan beberapa komponen sensor-sensor. - Kamera dan sensor optik untuk pengambilan data citra. - Senosr IMU untuk pengambilan data percepatan, rotasi dan orientasi. - Bisa juga dataset kumpulan beberapa sensor seperti data loging - dsb. b. Data yang diambil langsung dari beberapa platform data public - (roboflow, keaggle, coco, pascal voc, dsb) Beberapa Rekomendasi Dataset untuk Machine Learning dalam Teknik Elektro 1. Dataset untuk Pengolahan Citra (Computer Vision) - MNIST Dataset angka tulisan tangan (0-9) untuk klasifikasi. - CIFAR-10 & CIFAR-100 Dataset gambar untuk klasifikasi objek. - COCO (Common Objects in Context) Dataset objek dunia nyata untuk deteksi dan segmentasi. - Open Electrical Substation Images Dataset gambar infrastruktur listrik. 2. Dataset untuk Pemrosesan Sinyal dan Sistem Tenaga - EEG Brainwave Dataset Data sinyal EEG untuk analisis otak. - ECG Heartbeat Categorization Dataset Sinyal jantung ECG untuk klasifikasi kondisi kesehatan. - Electricity Load Forecasting Dataset konsumsi energi listrik untuk prediksi. - Fault Detection in Power Systems Dataset deteksi gangguan pada jaringan listrik. 3. Dataset untuk Kendali dan Robotika - Self-Driving Car Dataset (Udacity) Dataset untuk pengendalian kendaraan otonom. - MIT Push Dataset Dataset untuk robotik dan manipulasi objek. - CMU Motion Capture Dataset Data pergerakan tubuh manusia untuk kontrol robot. 4. Dataset untuk Prediksi dan Analisis Data - Weather Dataset Dataset cuaca untuk prediksi suhu dan kondisi lingkungan. - Energy Efficiency Dataset Dataset untuk prediksi konsumsi energi pada bangunan. - Battery Dataset Data performa baterai untuk analisis degradasi. 5. Dataset untuk Keamanan dan Deteksi Anomali - NSL-KDD Dataset deteksi serangan siber dalam jaringan komputer. - Power Grid Stability Dataset Data stabilitas jaringan listrik. - Water Treatment Plant Dataset Dataset pemantauan kualitas air untuk deteksi anomali. 2.2.a Pra-Pemrosesan Data Ini adalah tahap awal yang bertujuan untuk membersihkan dan menyusun data agar lebih siap digunakan dalam analisis atau pembelajaran mesin. Proses ini mencakup beberapa langkah utama, yaitu: 1. Data Integration (Integrasi Data) : Menggabungkan data dari berbagai sumber agar menjadi satu kesatuan yang dapat dianalisis. 2. Schema Integration: Menyamakan struktur data dari berbagai sumber. 3. Entity Identification Problem: Menyamakan identitas entitas yang sama tetapi memiliki format berbeda di beberapa sumber data. 4. Detecting and Resolving Data Values Concepts: Mengidentifikasi dan menyelesaikan perbedaan nilai data yang memiliki makna serupa. graph TD; A[Data Preprocessing] --> B[Data Integration] B --> C[Schema integration] B --> D[Entity identification problem] B --> E[Detecting and resolving data values concepts] A --> F[Data Reduction or Dimension Reduction] F --> G[Data cube aggregation] F --> H[Attribute subset selection] F --> I[Numerosity reduction] F --> J[Dimensionality reduction] A --> K[Data Transformation] K --> L[Normalization] K --> M[Attribute selection] K --> N[Discretization] K --> O[Concept hierarchy generation] A --> P[Data Cleaning] P --> Q[Missing data] P --> R[Noisy data] 2.2.b Pra-Pemrosesan data Pra-Pemrosesan data (refrensi dari buku machine learning crash course for engineers ) juga bisa di lakukan dengan cara sederhana sebagai berikut yang akan di bahas lebih detail pada materi ini : 1. Data Wrangling 2. Feature Scaling 3. Data Types 4. Data Splitting a. Data Wrangling Data wrangling, juga dikenal sebagai data munging, adalah proses pra-pemrosesan data yang mencakup pengumpulan, pembersihan, transformasi, dan penggabungan data dari berbagai sumber menjadi bentuk yang dapat diolah. a.1. Explorasi Data import pandas as pd df = pd . read_csv ( \"data.csv\" ) print ( df . info ()) # Menampilkan tipe data dan nilai yang hilang print ( df . describe ()) # Statistik ringkasan data numerik print ( df . head ()) # Melihat 5 baris pertama a.2. Membersihkan data a.2.1. missing dengan imputasi X = [[ 1 , 5 ],[ 2 , 10 ], [ np . nan , 2 ],[ 7 , 35 ],[ 6 , np . nan ],[ 15 , 75 ],[ 0 , 0 ]] print ( X ) [[1, 5], [2, 10], [nan, 2], [7, 35], [6, nan], [15, 75], [0, 0]] import numpy as np from sklearn.impute import SimpleImputer # Menggunakan imputasi mean untuk mengganti nilai NaN imputer = SimpleImputer ( strategy = \"mean\" ) # Bisa diganti dengan \"median\" atau \"most_frequent\" X_imputed = imputer . fit_transform ( X ) print ( X_imputed ) [[ 1. 5. ] [ 2. 10. ] [ 5.16666667 2. ] [ 7. 35. ] [ 6. 21.16666667] [15. 75. ] [ 0. 0. ]] a.2.2.Menghapus duplikasi data df . drop_duplicates ( inplace = True ) a.2.3.Mengoreksi format data df [ \"tanggal\" ] = pd . to_datetime ( df [ \"tanggal\" ]) # Mengubah ke format datetime df [ \"harga\" ] = df [ \"harga\" ] . astype ( float ) # Mengubah tipe data a.3. Menggabungkan Data df_merged = pd . merge ( df1 , df2 , on = \"ID\" ) b. Feature Scaling Saat bekerja dengan berbagai fitur atau variabel, hampir dapat dipastikan bahwa kita memiliki data pada berbagai fitur dalam rentang yang berbeda. Kasus , satu set data memiliki dua fitur: suhu dan kelembapan. Nilai untuk suhu berkisar antara 25 hingga 0,35 \u25e6 C, dan nilai untuk kelembapan berkisar antara 70 hingga 90%. Rentangnya berbeda untuk kedua fitur tersebut, sehingga keduanya tidak dapat dibandingkan. Perbedaan rentang ini juga tidak sesuai untuk digunakan oleh algoritme ML. Oleh karena itu, semacam transformasi dilakukan pada nilai atribut sehingga semua fitur berada dalam rentang yang sebanding dan dapat digunakan . Transformasi yang dilakukan pada data untuk tujuan ini adalah penskalaan fitur . Ada berbagai metode untuk penskalaan fitur, tiga di antaranya adalah standarisasi, normalisasi, dan penambahan data (data agumentation) . Metode-metode ini dijelaskan dalam bagian berikut. b.1. Standardisasi Standardisasi merupakan metode yang sangat populer untuk penskalaan fitur. Setelah menstandardisasi himpunan data, kita memperoleh nilai rata-rata nol dan simpangan baku satuan. Metode ini digunakan terutama dalam kasus-kasus di mana distribusi data mengikuti distribusi normal. Menstandardisasi data tidak membawa data ke rentang tertentu yang telah ditetapkan sebelumnya. Oleh karena itu, metode penskalaan fitur ini tidak terpengaruh oleh outlier . Setiap kali suatu fitur distandarisasi, setiap data terlebih dahulu dikurangi dari nilai rata-rata dan kemudian dibagi dengan simpangan baku. $ X_{std} = \\frac{X - \\mu}{\\sigma} $ b.2. Normalisasi Normalisasi adalah metode lain yang populer digunakan untuk penskalaan fitur. Normalisasi adalah teknik untuk mengubah nilai numerik yang berbeda menjadi rentang umum tanpa mendistorsi perbedaan antara nilai-nilai tersebut. Ini menskalakan semua nilai fitur dalam rentang [0,1] atau [.\u22121,1]. Karena ada nilai rentang tertentu yang menormalkan data, outlier yang ada dalam kumpulan data memengaruhi metode ini . Normalisasi bermanfaat ketika distribusi data kumpulan data tidak diketahui. \\(X_{norm} = \\frac{X - X_{min}}{X_{max} - X_{min}}\\) Kondisi Gunakan Normalisasi Gunakan Standarisasi Data tidak berdistribusi normal \u2705 \u274c Data berdistribusi normal (Gaussian) \u274c \u2705 Ada outlier ekstrem \u274c \u2705 Algoritma berbasis jarak (KNN, NN, SVM-RBF) \u2705 \u274c Algoritma berbasis distribusi (Regresi, PCA, SVM-Linear) \u274c \u2705 Temperature = [ 25 , 21 , 30 , 35 , 34 , 33 , 32 , 33 , 24 , 23 ] Humidity = [ 78 , 75 , 88 , 72 , 83 , 79 , 76 , 88 , 85 , 77 ] print ( 'Temperature =' , Temperature , ' \\n Humidity =' , Humidity ) Temperature = [25, 21, 30, 35, 34, 33, 32, 33, 24, 23] Humidity = [78, 75, 88, 72, 83, 79, 76, 88, 85, 77] import numpy as np from sklearn.preprocessing import MinMaxScaler , StandardScaler # Data asli Temperature = np . array ([ 25 , 21 , 30 , 35 , 34 , 33 , 32 , 33 , 24 , 23 ]) . reshape ( - 1 , 1 ) Humidity = np . array ([ 78 , 75 , 88 , 72 , 83 , 79 , 76 , 88 , 85 , 77 ]) . reshape ( - 1 , 1 ) # Normalisasi (Min-Max Scaling) minmax_scaler = MinMaxScaler () Temperature_norm = minmax_scaler . fit_transform ( Temperature ) Humidity_norm = minmax_scaler . fit_transform ( Humidity ) # Standarisasi (Z-score Scaling) std_scaler = StandardScaler () Temperature_std = std_scaler . fit_transform ( Temperature ) Humidity_std = std_scaler . fit_transform ( Humidity ) # Menampilkan hasil print ( \"Hasil Normalisasi\" ) print ( \"Temperature:\" , Temperature_norm . flatten ()) print ( \"Humidity:\" , Humidity_norm . flatten ()) print ( \" \\n Hasil Standarisasi (Z-score Scaling)\" ) print ( \"Temperature:\" , Temperature_std . flatten ()) print ( \"Humidity:\" , Humidity_std . flatten ()) Hasil Normalisasi Temperature: [0.28571429 0. 0.64285714 1. 0.92857143 0.85714286 0.78571429 0.85714286 0.21428571 0.14285714] Humidity: [0.375 0.1875 1. 0. 0.6875 0.4375 0.25 1. 0.8125 0.3125] Hasil Standarisasi (Z-score Scaling) Temperature: [-0.80977633 -1.61955266 0.20244408 1.2146645 1.01222041 0.80977633 0.60733225 0.80977633 -1.01222041 -1.2146645 ] Humidity: [-0.39622642 -0.96226415 1.49056604 -1.52830189 0.54716981 -0.20754717 -0.77358491 1.49056604 0.9245283 -0.58490566] c. Data Type Algoritme pembelajaran mesin menangani berbagai jenis data. Oleh karena itu, berbagai jenis data memerlukan pendekatan yang berbeda terhadap algoritme ML. Jenis data dapat dikategorikan sebagai (a.1.) berurutan dan tidak berurutan dan (a.2) stasioner dan tidak stasioner. c.1. Berurutan dan tidak berurutan Tipe data sekuensial adalah tipe data yang memiliki urutan tertentu, seperti daftar, string, tupel, urutan byte, array byte, dan objek rentang. Elemen dalam tipe data tersebut dapat diakses melalui indeksnya, yang menunjukkan posisi mereka dalam urutan dan dimulai dari 0. Gambar (a) Tipe data non-sekuensial tidak memiliki urutan, seperti kamus ( dictoneries ) dan set. Tidak ada urutan yang dipertahankan di antara elemen dalam tipe data non-sekuensial. Gambar (b) c.2. Stasioner dan non-stasioner Kumpulan data stasioner diketahui memiliki sifat statistik yang konstan, seperti rata-rata, varians, dll., seiring waktu. Data dalam kumpulan data tersebut mudah diramalkan karena sifatnya tidak berubah seiring waktu. Kumpulan data non-stasioner yaitu kumpulan data yang sifat statistiknya berubah seiring waktu . Jenis data ini tidak dapat diramalkan atau dimodelkan karena sifatnya yang bervariasi. Data non-stasioner memiliki tren, siklus, atau musiman di dalamnya. Gambar 3.5 menunjukkan contoh data stasioner dan non-stasioner. d. Data Spliting Pemisahan data berfungsi untuk melatih model ML dengan tepat. Pemisahan yang tepat mencegah model dari overfitting, memastikan penilaian yang tepat, dan meningkatkan kinerja model. Cara pemisahan data yang paling umum adalah - dengan membagi dataset menjadi dua subset\u2014satu dataset pelatihan dan satu lagi dataset pengujian. - namun, konvensi pemisahan menjadi tiga subset juga sudah umum. Dalam kasus ini, dataset dibagi menjadi dataset pelatihan, validasi, dan pengujian. 3. Tugas Mahasiswa Silahkan lakukan pra-pemrosesan Data pada dataset Anda yang sudah dicari, jika belum ada gunakan dataset yang sudah disediakan!","title":"Pertemuan 2: Pengumpulan, Pemrosesan dan Visualisasi pada Dataset"},{"location":"2_dataset/#pertemuan-2-pengumpulan-pemrosesan-dan-visualisasi-pada-dataset","text":"[TKE1686] MK Machine Learning (3-SKS) oleh Gramandha Wega Intyanto","title":"Pertemuan 2: Pengumpulan, Pemrosesan dan Visualisasi pada Dataset"},{"location":"2_dataset/#1-alur-kerja-pada-machine-learning","text":"graph LR; A[\"Tahap 1\\nPengumpulan Dataset\"] --> B[\"Tahap 2\\nPemrosesan Dataset\"]; B --> C[\"Tahap 3\\nPembelajaran Model\"]; C --> D[\"Tahap 4\\nEvaluasi Model\"]; D -.->|Perbaikan pemrosesan Dataset| B; D -.->|Revisi Model| C; D -.->|Perbaikan Dataset| A; Pengumpulan Dataset: Langkah awal ML adalah mengumpulkan kumpulan data. Hal-hal yang harus dipertimbangakan dalam pengumpulan data yaitu metode pengambilan data, data akan digunakan untuk apa? Preproses Data: Data yang kami kumpulkan sering kali tidak terorganisir dan tidak dapat langsung digunakan untuk melatih model. Sebelum melanjutkan ke langkah berikutnya, data perlu diproses terlebih dahulu. Kumpulan data mungkin berisi data yang hilang atau berisik, perlu di perbaiki atau di filter ; Data yang berbeda dapat berada dalam rentang yang berbeda, perlu dilakukan standarisasi atau normalisasi karena bisa jadi menjadi masalah bagi model; Perlu menemukan dan memilih data yang lebih berkontribusi untuk menemukan variabel target; Terakhir, kumpulan data harus dibagi menjadi dua set yaitu pelatihan dan pengujian (bisa juga dilakukan pembagian menjadi 3 yaitu pelatihan, validasi, pengujian ) | yang sering digunakan 80% set pelatihan, 20% set pengujian / 70% set pelatihan 20% set validasi 10% set pengujian. Melatih Model: Berdasarkan permasalahan, jenis model yang dibutuhkan harus dipilih terlebih dahulu. Saat memilih model, informasi yang tersedia pada kumpulan data harus dipertimbangkan. Evaluasi Model: Setelah model dibangun dan dilatih, penting untuk memahami seberapa baik model telah dilatih, seberapa baik kinerjanya, dan apakah model akan berguna untuk eksperimen. Kumpulan data set pengujiandigunakan untuk menguji model , dan berbagai metrik evaluasi digunakan untuk mengevaluasi dan memahami model.","title":"1. Alur Kerja pada Machine Learning"},{"location":"2_dataset/#2-dataset","text":"Performa model sangat bergantung pada persiapan kumpulan data (dataset). Biasanya Kumpulan data paling baik disusun dalam bentuk tabel, di mana setiap baris sesuai dengan satu entri data dan setiap kolom mewakili variabel tertentu yang terkait dengan semua data yang tersedia dalam kumpulan data tersebut. Ukuran kumpulan data yang berkisar dari terabyte hingga megabyte dapat disebut sebagai kumpulan data besar, sedangkan kumpulan data dalam kisaran kilobyte adalah kumpulan data kecil.","title":"2. Dataset"},{"location":"2_dataset/#21-pengumpulan-data","text":"a. Data yang diambil langsung dari secara langsung dengan beberapa komponen sensor-sensor. - Kamera dan sensor optik untuk pengambilan data citra. - Senosr IMU untuk pengambilan data percepatan, rotasi dan orientasi. - Bisa juga dataset kumpulan beberapa sensor seperti data loging - dsb. b. Data yang diambil langsung dari beberapa platform data public - (roboflow, keaggle, coco, pascal voc, dsb) Beberapa Rekomendasi Dataset untuk Machine Learning dalam Teknik Elektro 1. Dataset untuk Pengolahan Citra (Computer Vision) - MNIST Dataset angka tulisan tangan (0-9) untuk klasifikasi. - CIFAR-10 & CIFAR-100 Dataset gambar untuk klasifikasi objek. - COCO (Common Objects in Context) Dataset objek dunia nyata untuk deteksi dan segmentasi. - Open Electrical Substation Images Dataset gambar infrastruktur listrik. 2. Dataset untuk Pemrosesan Sinyal dan Sistem Tenaga - EEG Brainwave Dataset Data sinyal EEG untuk analisis otak. - ECG Heartbeat Categorization Dataset Sinyal jantung ECG untuk klasifikasi kondisi kesehatan. - Electricity Load Forecasting Dataset konsumsi energi listrik untuk prediksi. - Fault Detection in Power Systems Dataset deteksi gangguan pada jaringan listrik. 3. Dataset untuk Kendali dan Robotika - Self-Driving Car Dataset (Udacity) Dataset untuk pengendalian kendaraan otonom. - MIT Push Dataset Dataset untuk robotik dan manipulasi objek. - CMU Motion Capture Dataset Data pergerakan tubuh manusia untuk kontrol robot. 4. Dataset untuk Prediksi dan Analisis Data - Weather Dataset Dataset cuaca untuk prediksi suhu dan kondisi lingkungan. - Energy Efficiency Dataset Dataset untuk prediksi konsumsi energi pada bangunan. - Battery Dataset Data performa baterai untuk analisis degradasi. 5. Dataset untuk Keamanan dan Deteksi Anomali - NSL-KDD Dataset deteksi serangan siber dalam jaringan komputer. - Power Grid Stability Dataset Data stabilitas jaringan listrik. - Water Treatment Plant Dataset Dataset pemantauan kualitas air untuk deteksi anomali.","title":"2.1. Pengumpulan Data"},{"location":"2_dataset/#22a-pra-pemrosesan-data","text":"Ini adalah tahap awal yang bertujuan untuk membersihkan dan menyusun data agar lebih siap digunakan dalam analisis atau pembelajaran mesin. Proses ini mencakup beberapa langkah utama, yaitu: 1. Data Integration (Integrasi Data) : Menggabungkan data dari berbagai sumber agar menjadi satu kesatuan yang dapat dianalisis. 2. Schema Integration: Menyamakan struktur data dari berbagai sumber. 3. Entity Identification Problem: Menyamakan identitas entitas yang sama tetapi memiliki format berbeda di beberapa sumber data. 4. Detecting and Resolving Data Values Concepts: Mengidentifikasi dan menyelesaikan perbedaan nilai data yang memiliki makna serupa. graph TD; A[Data Preprocessing] --> B[Data Integration] B --> C[Schema integration] B --> D[Entity identification problem] B --> E[Detecting and resolving data values concepts] A --> F[Data Reduction or Dimension Reduction] F --> G[Data cube aggregation] F --> H[Attribute subset selection] F --> I[Numerosity reduction] F --> J[Dimensionality reduction] A --> K[Data Transformation] K --> L[Normalization] K --> M[Attribute selection] K --> N[Discretization] K --> O[Concept hierarchy generation] A --> P[Data Cleaning] P --> Q[Missing data] P --> R[Noisy data]","title":"2.2.a Pra-Pemrosesan Data"},{"location":"2_dataset/#22b-pra-pemrosesan-data","text":"Pra-Pemrosesan data (refrensi dari buku machine learning crash course for engineers ) juga bisa di lakukan dengan cara sederhana sebagai berikut yang akan di bahas lebih detail pada materi ini : 1. Data Wrangling 2. Feature Scaling 3. Data Types 4. Data Splitting","title":"2.2.b Pra-Pemrosesan data"},{"location":"2_dataset/#a-data-wrangling","text":"Data wrangling, juga dikenal sebagai data munging, adalah proses pra-pemrosesan data yang mencakup pengumpulan, pembersihan, transformasi, dan penggabungan data dari berbagai sumber menjadi bentuk yang dapat diolah.","title":"a. Data Wrangling"},{"location":"2_dataset/#a1-explorasi-data","text":"import pandas as pd df = pd . read_csv ( \"data.csv\" ) print ( df . info ()) # Menampilkan tipe data dan nilai yang hilang print ( df . describe ()) # Statistik ringkasan data numerik print ( df . head ()) # Melihat 5 baris pertama","title":"a.1. Explorasi Data"},{"location":"2_dataset/#a2-membersihkan-data","text":"a.2.1. missing dengan imputasi X = [[ 1 , 5 ],[ 2 , 10 ], [ np . nan , 2 ],[ 7 , 35 ],[ 6 , np . nan ],[ 15 , 75 ],[ 0 , 0 ]] print ( X ) [[1, 5], [2, 10], [nan, 2], [7, 35], [6, nan], [15, 75], [0, 0]] import numpy as np from sklearn.impute import SimpleImputer # Menggunakan imputasi mean untuk mengganti nilai NaN imputer = SimpleImputer ( strategy = \"mean\" ) # Bisa diganti dengan \"median\" atau \"most_frequent\" X_imputed = imputer . fit_transform ( X ) print ( X_imputed ) [[ 1. 5. ] [ 2. 10. ] [ 5.16666667 2. ] [ 7. 35. ] [ 6. 21.16666667] [15. 75. ] [ 0. 0. ]] a.2.2.Menghapus duplikasi data df . drop_duplicates ( inplace = True ) a.2.3.Mengoreksi format data df [ \"tanggal\" ] = pd . to_datetime ( df [ \"tanggal\" ]) # Mengubah ke format datetime df [ \"harga\" ] = df [ \"harga\" ] . astype ( float ) # Mengubah tipe data","title":"a.2. Membersihkan data"},{"location":"2_dataset/#a3-menggabungkan-data","text":"df_merged = pd . merge ( df1 , df2 , on = \"ID\" )","title":"a.3. Menggabungkan Data"},{"location":"2_dataset/#b-feature-scaling","text":"Saat bekerja dengan berbagai fitur atau variabel, hampir dapat dipastikan bahwa kita memiliki data pada berbagai fitur dalam rentang yang berbeda. Kasus , satu set data memiliki dua fitur: suhu dan kelembapan. Nilai untuk suhu berkisar antara 25 hingga 0,35 \u25e6 C, dan nilai untuk kelembapan berkisar antara 70 hingga 90%. Rentangnya berbeda untuk kedua fitur tersebut, sehingga keduanya tidak dapat dibandingkan. Perbedaan rentang ini juga tidak sesuai untuk digunakan oleh algoritme ML. Oleh karena itu, semacam transformasi dilakukan pada nilai atribut sehingga semua fitur berada dalam rentang yang sebanding dan dapat digunakan . Transformasi yang dilakukan pada data untuk tujuan ini adalah penskalaan fitur . Ada berbagai metode untuk penskalaan fitur, tiga di antaranya adalah standarisasi, normalisasi, dan penambahan data (data agumentation) . Metode-metode ini dijelaskan dalam bagian berikut.","title":"b. Feature Scaling"},{"location":"2_dataset/#b1-standardisasi","text":"Standardisasi merupakan metode yang sangat populer untuk penskalaan fitur. Setelah menstandardisasi himpunan data, kita memperoleh nilai rata-rata nol dan simpangan baku satuan. Metode ini digunakan terutama dalam kasus-kasus di mana distribusi data mengikuti distribusi normal. Menstandardisasi data tidak membawa data ke rentang tertentu yang telah ditetapkan sebelumnya. Oleh karena itu, metode penskalaan fitur ini tidak terpengaruh oleh outlier . Setiap kali suatu fitur distandarisasi, setiap data terlebih dahulu dikurangi dari nilai rata-rata dan kemudian dibagi dengan simpangan baku. $ X_{std} = \\frac{X - \\mu}{\\sigma} $","title":"b.1. Standardisasi"},{"location":"2_dataset/#b2-normalisasi","text":"Normalisasi adalah metode lain yang populer digunakan untuk penskalaan fitur. Normalisasi adalah teknik untuk mengubah nilai numerik yang berbeda menjadi rentang umum tanpa mendistorsi perbedaan antara nilai-nilai tersebut. Ini menskalakan semua nilai fitur dalam rentang [0,1] atau [.\u22121,1]. Karena ada nilai rentang tertentu yang menormalkan data, outlier yang ada dalam kumpulan data memengaruhi metode ini . Normalisasi bermanfaat ketika distribusi data kumpulan data tidak diketahui. \\(X_{norm} = \\frac{X - X_{min}}{X_{max} - X_{min}}\\) Kondisi Gunakan Normalisasi Gunakan Standarisasi Data tidak berdistribusi normal \u2705 \u274c Data berdistribusi normal (Gaussian) \u274c \u2705 Ada outlier ekstrem \u274c \u2705 Algoritma berbasis jarak (KNN, NN, SVM-RBF) \u2705 \u274c Algoritma berbasis distribusi (Regresi, PCA, SVM-Linear) \u274c \u2705 Temperature = [ 25 , 21 , 30 , 35 , 34 , 33 , 32 , 33 , 24 , 23 ] Humidity = [ 78 , 75 , 88 , 72 , 83 , 79 , 76 , 88 , 85 , 77 ] print ( 'Temperature =' , Temperature , ' \\n Humidity =' , Humidity ) Temperature = [25, 21, 30, 35, 34, 33, 32, 33, 24, 23] Humidity = [78, 75, 88, 72, 83, 79, 76, 88, 85, 77] import numpy as np from sklearn.preprocessing import MinMaxScaler , StandardScaler # Data asli Temperature = np . array ([ 25 , 21 , 30 , 35 , 34 , 33 , 32 , 33 , 24 , 23 ]) . reshape ( - 1 , 1 ) Humidity = np . array ([ 78 , 75 , 88 , 72 , 83 , 79 , 76 , 88 , 85 , 77 ]) . reshape ( - 1 , 1 ) # Normalisasi (Min-Max Scaling) minmax_scaler = MinMaxScaler () Temperature_norm = minmax_scaler . fit_transform ( Temperature ) Humidity_norm = minmax_scaler . fit_transform ( Humidity ) # Standarisasi (Z-score Scaling) std_scaler = StandardScaler () Temperature_std = std_scaler . fit_transform ( Temperature ) Humidity_std = std_scaler . fit_transform ( Humidity ) # Menampilkan hasil print ( \"Hasil Normalisasi\" ) print ( \"Temperature:\" , Temperature_norm . flatten ()) print ( \"Humidity:\" , Humidity_norm . flatten ()) print ( \" \\n Hasil Standarisasi (Z-score Scaling)\" ) print ( \"Temperature:\" , Temperature_std . flatten ()) print ( \"Humidity:\" , Humidity_std . flatten ()) Hasil Normalisasi Temperature: [0.28571429 0. 0.64285714 1. 0.92857143 0.85714286 0.78571429 0.85714286 0.21428571 0.14285714] Humidity: [0.375 0.1875 1. 0. 0.6875 0.4375 0.25 1. 0.8125 0.3125] Hasil Standarisasi (Z-score Scaling) Temperature: [-0.80977633 -1.61955266 0.20244408 1.2146645 1.01222041 0.80977633 0.60733225 0.80977633 -1.01222041 -1.2146645 ] Humidity: [-0.39622642 -0.96226415 1.49056604 -1.52830189 0.54716981 -0.20754717 -0.77358491 1.49056604 0.9245283 -0.58490566]","title":"b.2. Normalisasi"},{"location":"2_dataset/#c-data-type","text":"Algoritme pembelajaran mesin menangani berbagai jenis data. Oleh karena itu, berbagai jenis data memerlukan pendekatan yang berbeda terhadap algoritme ML. Jenis data dapat dikategorikan sebagai (a.1.) berurutan dan tidak berurutan dan (a.2) stasioner dan tidak stasioner.","title":"c. Data Type"},{"location":"2_dataset/#c1-berurutan-dan-tidak-berurutan","text":"Tipe data sekuensial adalah tipe data yang memiliki urutan tertentu, seperti daftar, string, tupel, urutan byte, array byte, dan objek rentang. Elemen dalam tipe data tersebut dapat diakses melalui indeksnya, yang menunjukkan posisi mereka dalam urutan dan dimulai dari 0. Gambar (a) Tipe data non-sekuensial tidak memiliki urutan, seperti kamus ( dictoneries ) dan set. Tidak ada urutan yang dipertahankan di antara elemen dalam tipe data non-sekuensial. Gambar (b)","title":"c.1. Berurutan dan tidak berurutan"},{"location":"2_dataset/#c2-stasioner-dan-non-stasioner","text":"Kumpulan data stasioner diketahui memiliki sifat statistik yang konstan, seperti rata-rata, varians, dll., seiring waktu. Data dalam kumpulan data tersebut mudah diramalkan karena sifatnya tidak berubah seiring waktu. Kumpulan data non-stasioner yaitu kumpulan data yang sifat statistiknya berubah seiring waktu . Jenis data ini tidak dapat diramalkan atau dimodelkan karena sifatnya yang bervariasi. Data non-stasioner memiliki tren, siklus, atau musiman di dalamnya. Gambar 3.5 menunjukkan contoh data stasioner dan non-stasioner.","title":"c.2. Stasioner dan non-stasioner"},{"location":"2_dataset/#d-data-spliting","text":"Pemisahan data berfungsi untuk melatih model ML dengan tepat. Pemisahan yang tepat mencegah model dari overfitting, memastikan penilaian yang tepat, dan meningkatkan kinerja model. Cara pemisahan data yang paling umum adalah - dengan membagi dataset menjadi dua subset\u2014satu dataset pelatihan dan satu lagi dataset pengujian. - namun, konvensi pemisahan menjadi tiga subset juga sudah umum. Dalam kasus ini, dataset dibagi menjadi dataset pelatihan, validasi, dan pengujian.","title":"d. Data Spliting"},{"location":"2_dataset/#3-tugas-mahasiswa","text":"Silahkan lakukan pra-pemrosesan Data pada dataset Anda yang sudah dicari, jika belum ada gunakan dataset yang sudah disediakan!","title":"3. Tugas Mahasiswa"},{"location":"LKM1/","text":"Silahkan cari studi kasus pada bidang Anda yang dapat diselesaikan dengan ML. Beri 2 contoh tiap teknik( supervised learning dan unspervised learning ) satu masalah! Cari dataset terkait studi kasus tersebut kemudian jelaskan proses penyelesaian dengan algoritma apa! Note: Rekomendasi tempat untuk mencari dataset: kaggle , uci , google dataset","title":"LKM1"},{"location":"LKM2/","text":"LKM 2 1.Jelaskan Note: Rekomendasi tempat untuk mencari dataset: kaggle , uci , google dataset","title":"LKM 2"},{"location":"LKM2/#lkm-2","text":"1.Jelaskan Note: Rekomendasi tempat untuk mencari dataset: kaggle , uci , google dataset","title":"LKM 2"}]}